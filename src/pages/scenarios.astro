---
import Layout from "../layouts/Layout.astro";
---

<Layout title='Scenarios - Gloomhaven Tracker'>
	<div class='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8'>
		<!-- Header -->
		<div class='mb-8'>
			<h1 class='text-3xl font-bold text-white'>Scenarios</h1>
			<p class='text-gray-400 mt-2'>Track scenario completion across all campaigns</p>
		</div>

		<!-- Loading State -->
		<div id='loading-state' class='text-center py-12'>
			<div class='text-white text-lg'>Loading scenario data...</div>
		</div>

		<!-- Content -->
		<div id='scenarios-content' class='hidden'>
			<!-- Overall Progress -->
			<div class='bg-gray-800 rounded-lg p-6 border border-gray-700 mb-8'>
				<h2 class='text-xl font-semibold text-white mb-4'>Overall Progress</h2>
				<div class='grid grid-cols-1 md:grid-cols-3 gap-6'>
					<div class='text-center'>
						<div id='total-completed' class='text-3xl font-bold text-white'>0</div>
						<div class='text-sm text-gray-400'>Completed Scenarios</div>
					</div>
					<div class='text-center'>
						<div id='total-attempts' class='text-3xl font-bold text-white'>0</div>
						<div class='text-sm text-gray-400'>Total Attempts</div>
					</div>
					<div class='text-center'>
						<div id='success-rate' class='text-3xl font-bold text-white'>0%</div>
						<div class='text-sm text-gray-400'>Success Rate</div>
					</div>
				</div>
			</div>

			<!-- Scenarios List -->
			<div class='grid grid-cols-1 lg:grid-cols-2 gap-6'>
				<!-- Scenarios will be loaded here -->
			</div>
		</div>

		<!-- Error State -->
		<div id='error-state' class='hidden text-center py-12'>
			<div class='text-red-400 text-lg'>Failed to load scenario data</div>
			<a href='/campaigns' class='text-purple-400 hover:text-purple-300 mt-4 inline-block'>← Back to Campaigns</a>
		</div>
	</div>

	<script>
		async function loadScenarioData() {
			try {
				// Load all campaigns
				const campaignsResponse = await fetch("/api/campaigns");
				if (!campaignsResponse.ok) {
					throw new Error("Failed to load campaigns");
				}
				const campaigns = await campaignsResponse.json();

				// Process scenario data
				const scenarioStats: any = {};
				let totalCompleted = 0;
				let totalAttempts = 0;

				// Initialize scenario stats for all 25 scenarios
				for (let i = 1; i <= 25; i++) {
					scenarioStats[i] = {
						number: i,
						name: `Scenario ${i}`,
						description: `Description for scenario ${i}`,
						campaigns: [],
						totalCompleted: 0,
						totalAttempts: 0,
					};
				}

				// Process each campaign
				campaigns.forEach((campaign: any) => {
					if (campaign.scenarios) {
						campaign.scenarios.forEach((scenario: any) => {
							const scenarioNum = scenario.number;
							if (scenarioStats[scenarioNum]) {
								scenarioStats[scenarioNum].campaigns.push({
									campaignId: campaign.id,
									campaignName: campaign.name,
									completed: scenario.completed,
									completedAt: scenario.completedAt,
								});

								scenarioStats[scenarioNum].totalAttempts++;
								if (scenario.completed) {
									scenarioStats[scenarioNum].totalCompleted++;
									totalCompleted++;
								}
								totalAttempts++;
							}
						});
					}
				});

				// Update overall stats
				const totalCompletedEl = document.getElementById("total-completed");
				const totalAttemptsEl = document.getElementById("total-attempts");
				const successRateEl = document.getElementById("success-rate");

				if (totalCompletedEl) totalCompletedEl.textContent = totalCompleted.toString();
				if (totalAttemptsEl) totalAttemptsEl.textContent = totalAttempts.toString();
				if (successRateEl) successRateEl.textContent = totalAttempts > 0 ? Math.round((totalCompleted / totalAttempts) * 100) + "%" : "0%";

				// Render scenarios
				const scenariosContainer = document.querySelector("#scenarios-content .grid");
				if (scenariosContainer) {
					scenariosContainer.innerHTML = Object.values(scenarioStats)
						.map(
							(scenario: any) => `
           <div class="bg-gray-800 rounded-lg border border-gray-700 overflow-hidden">
             <!-- Scenario Header -->
             <div class="bg-gray-700 px-4 py-3 border-b border-gray-600">
               <div class="flex justify-between items-center">
                 <div>
                   <h3 class="text-lg font-semibold text-white">Scenario ${scenario.number}</h3>
                   <p class="text-gray-400 text-xs mt-1">${scenario.name}</p>
                 </div>
                 <div class="text-right">
                   <div class="text-sm text-gray-400">
                     ${scenario.totalCompleted}/${scenario.totalAttempts} completed
                   </div>
                   <div class="text-xs text-gray-500">
                     ${Math.round((scenario.totalCompleted / Math.max(scenario.totalAttempts, 1)) * 100)}% success
                   </div>
                 </div>
               </div>
             </div>

             <!-- Campaign Progress -->
             <div class="p-4">
               ${
									scenario.campaigns.length === 0
										? '<p class="text-gray-400 text-center py-3 text-sm">No campaigns attempted yet</p>'
										: `<div class="space-y-2">
                   ${scenario.campaigns
											.map(
												(campaignScenario: any) => `
                     <div class="flex justify-between items-center p-2 rounded border ${campaignScenario.completed ? "bg-green-900/20 border-green-700" : "bg-gray-700 border-gray-600"}">
                        <div class="flex items-center space-x-2">
                         <span class="w-2 h-2 rounded-full ${campaignScenario.completed ? "bg-green-400" : "bg-gray-500"}"></span>
                          <span class="text-white text-sm font-medium">${campaignScenario.campaignName}</span>
                          ${
														campaignScenario.completed && campaignScenario.completedAt
															? `<span class="text-xs text-gray-400">${new Date(campaignScenario.completedAt).toLocaleDateString()}</span>`
															: ""
													}
                        </div>
                        <div class="flex items-center space-x-2">
                         ${
														campaignScenario.completed
															? '<span class="text-green-400 text-xs">✓</span>'
															: `<button
                              class="bg-purple-600 hover:bg-purple-700 text-white text-xs py-1 px-2 rounded transition-colors"
                              onclick="markScenarioComplete(${campaignScenario.campaignId}, ${scenario.number})"
                            >
                              Complete
                            </button>`
													}
                        </div>
                      </div>
                   `
											)
											.join("")}
                  </div>`
								}
             </div>
           </div>
         `
						)
						.join("");
				}

				// Show content
				const loadingState = document.getElementById("loading-state");
				const scenariosContent = document.getElementById("scenarios-content");
				if (loadingState) loadingState.classList.add("hidden");
				if (scenariosContent) scenariosContent.classList.remove("hidden");
			} catch (error) {
				console.error("Error loading scenario data:", error);
				const loadingState = document.getElementById("loading-state");
				const errorState = document.getElementById("error-state");
				if (loadingState) loadingState.classList.add("hidden");
				if (errorState) errorState.classList.remove("hidden");
			}
		}

		// Function to mark a scenario as complete (opens campaign edit page)
		function markScenarioComplete(campaignId: string, scenarioNumber: number) {
			if (confirm(`Mark Scenario ${scenarioNumber} as complete for this campaign?`)) {
				window.location.href = `/campaigns/${campaignId}/edit`;
			}
		}

		// Make function globally available
		(window as any).markScenarioComplete = markScenarioComplete;

		// Load data when page loads
		loadScenarioData();
	</script>
</Layout>
