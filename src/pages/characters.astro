---
import Layout from "../layouts/Layout.astro";
import CharacterCard from "../components/CharacterCard.astro";
import EmptyState from "../components/EmptyState.astro";
---

<Layout title='Characters - Gloomhaven Tracker'>
	<div class='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8'>
		<!-- Header -->
		<div class='flex justify-between items-center mb-8'>
			<div>
				<h1 class='text-3xl font-bold text-white'>Characters</h1>
				<p class='text-gray-400 mt-2'>Manage your independent characters</p>
			</div>
			<a href='/characters/new' class='bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200'>
				+ New Character
			</a>
		</div>

		<!-- Empty State (shown by default) -->
		<div id='empty-state' class='text-center py-16'>
			<div class='w-20 h-20 bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-6'>
				<span class='text-3xl'>ðŸ‘¤</span>
			</div>
			<h2 class='text-2xl font-semibold text-gray-300 mb-4'>No characters yet</h2>
			<p class='text-gray-400 mb-8 max-w-md mx-auto'>Create your first character to start tracking your Gloomhaven: Jaws of the Lion adventures.</p>
			<a href='/characters/new' class='bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200'>
				Create Character
			</a>
		</div>

		<!-- Characters Grid (hidden by default) -->
		<div id='characters-container' class='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6' style='display: none;'></div>

		<script>
			// Load characters on page load
			document.addEventListener("DOMContentLoaded", () => {
				loadCharacters();
			});

			async function loadCharacters() {
				try {
					const response = await fetch("/api/characters");
					if (!response.ok) {
						throw new Error("Failed to fetch characters");
					}
					const characters = await response.json();

					const emptyState = document.getElementById("empty-state");
					const charactersContainer = document.getElementById("characters-container");

					if (characters.length > 0) {
						// Hide empty state and show characters
						if (emptyState) emptyState.style.display = "none";
						if (charactersContainer) {
							charactersContainer.style.display = "grid";
							displayCharacters(characters);
						}
					} else {
						// Show empty state and hide characters
						if (emptyState) emptyState.style.display = "block";
						if (charactersContainer) charactersContainer.style.display = "none";
					}
				} catch (error) {
					console.error("Failed to load characters:", error);
					// Show empty state on error
					const emptyState = document.getElementById("empty-state");
					const charactersContainer = document.getElementById("characters-container");
					if (emptyState) emptyState.style.display = "block";
					if (charactersContainer) charactersContainer.style.display = "none";
				}
			}

			function displayCharacters(characters: any[]) {
				const container = document.getElementById("characters-container");
				if (!container) return;

				container.innerHTML = "";

				characters.forEach((character) => {
					const characterCard = document.createElement("div");
					characterCard.className = "bg-gray-800 rounded-lg border border-gray-700 hover:border-gray-600 transition-all duration-200";

					characterCard.innerHTML = `
            <div class="p-6 border-b border-gray-700">
              <div class="flex justify-between items-start mb-3">
                <h3 class="text-xl font-semibold text-white">${character.name}</h3>
                <span class="text-xs text-gray-400 bg-gray-700 px-2 py-1 rounded">
                  ${character.class.name}
                </span>
              </div>
              <p class="text-gray-400">
                ${character.class.symbol} ${character.class.name} - Level ${character.level}
              </p>
            </div>

            <div class="p-6">
              <div class="grid grid-cols-2 gap-4 mb-4">
                <div class="text-center">
                  <div class="text-xl font-bold text-white">${character.experience}</div>
                  <div class="text-sm text-gray-400">Experience</div>
                </div>
                <div class="text-center">
                  <div class="text-xl font-bold text-white">${character.gold}</div>
                  <div class="text-sm text-gray-400">Gold</div>
                </div>
              </div>

              <div class="space-y-2 mb-4">
                <div class="flex justify-between text-sm">
                  <span class="text-gray-400">Checkmarks:</span>
                  <span class="text-white">${character.checkmarks}</span>
                </div>
                <div class="flex justify-between text-sm">
                  <span class="text-gray-400">Perks:</span>
                  <span class="text-white">${character.perks.length}</span>
                </div>
                <div class="flex justify-between text-sm">
                  <span class="text-gray-400">Items:</span>
                  <span class="text-white">${character.items.length}</span>
                </div>
              </div>

              <div class="flex space-x-2">
                <a
                  href="/character-edit?id=${character.id}"
                  class="flex-1 bg-purple-600 hover:bg-purple-700 text-white text-center py-2 px-3 rounded text-sm font-medium transition-colors"
                >
                  Edit Character
                </a>
                <button class="flex-1 bg-red-600 hover:bg-red-700 text-white text-center py-2 px-3 rounded text-sm font-medium transition-colors delete-character-btn" data-character-id="${character.id}">
                  Delete
                </button>
              </div>
            </div>
          `;

					container.appendChild(characterCard);
				});

				// Add delete event listeners
				document.querySelectorAll(".delete-character-btn").forEach((btn) => {
					btn.addEventListener("click", async (e) => {
						const target = e.target as HTMLElement;
						const characterId = target.getAttribute("data-character-id");
						if (confirm("Are you sure you want to delete this character? This action cannot be undone.")) {
							try {
								const response = await fetch(`/api/characters/${characterId}`, {
									method: "DELETE",
								});

								if (response.ok) {
									alert("Character deleted successfully!");
									loadCharacters(); // Reload the characters list
								} else {
									alert("Failed to delete character. Please try again.");
								}
							} catch (error) {
								console.error("Error deleting character:", error);
								alert("Failed to delete character. Please try again.");
							}
						}
					});
				});
			}
		</script>
	</div>
</Layout>
