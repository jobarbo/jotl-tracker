---
import Layout from "../layouts/Layout.astro";
import StatCard from "../components/StatCard.astro";
import CampaignCard from "../components/CampaignCard.astro";
import Button from "../components/Button.astro";
import EmptyState from "../components/EmptyState.astro";
import DataExport from "../components/DataExport.astro";

// For now, we'll show empty state since we need client-side data loading
const campaigns: any[] = [];
---

<Layout title='Gloomhaven Tracker - Dashboard'>
	<div class='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8'>
		<!-- Hero Section -->
		<div class='text-center mb-12'>
			<h1 class='text-4xl font-bold text-white mb-4'>Welcome to Gloomhaven Tracker</h1>
			<p class='text-xl text-gray-300 mb-8'>Track your Jaws of the Lion campaigns across multiple groups</p>
			<div class='flex justify-center space-x-4'>
				<Button href='/campaigns/new' variant='primary' size='lg'> Start New Campaign </Button>
				<Button href='/campaigns' variant='secondary' size='lg'> View All Campaigns </Button>
			</div>
		</div>

		<!-- Stats Overview -->
		<div class='grid grid-cols-1 md:grid-cols-3 gap-6 mb-12'>
			<div class='stat-card bg-gray-800 rounded-lg p-6 border border-gray-700'>
				<div class='flex items-center'>
					<div class='flex-shrink-0'>
						<div class='w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center'>
							<span class='text-white font-bold text-lg'>📚</span>
						</div>
					</div>
					<div class='ml-4'>
						<p class='text-sm font-medium text-gray-400'>Total Campaigns</p>
						<p class='stat-value text-2xl font-semibold text-white'>0</p>
					</div>
				</div>
			</div>
			<div class='stat-card bg-gray-800 rounded-lg p-6 border border-gray-700'>
				<div class='flex items-center'>
					<div class='flex-shrink-0'>
						<div class='w-8 h-8 bg-green-600 rounded-lg flex items-center justify-center'>
							<span class='text-white font-bold text-lg'>👥</span>
						</div>
					</div>
					<div class='ml-4'>
						<p class='text-sm font-medium text-gray-400'>Total Characters</p>
						<p class='stat-value text-2xl font-semibold text-white'>0</p>
					</div>
				</div>
			</div>
			<div class='stat-card bg-gray-800 rounded-lg p-6 border border-gray-700'>
				<div class='flex items-center'>
					<div class='flex-shrink-0'>
						<div class='w-8 h-8 bg-purple-600 rounded-lg flex items-center justify-center'>
							<span class='text-white font-bold text-lg'>🎯</span>
						</div>
					</div>
					<div class='ml-4'>
						<p class='text-sm font-medium text-gray-400'>Completed Scenarios</p>
						<p class='stat-value text-2xl font-semibold text-white'>0</p>
					</div>
				</div>
			</div>
		</div>

		<!-- Recent Campaigns -->
		<div class='mb-12'>
			<div class='flex justify-between items-center mb-6'>
				<h2 class='text-2xl font-bold text-white'>Recent Campaigns</h2>
				<a href='/campaigns' class='text-purple-400 hover:text-purple-300 font-medium'> View All → </a>
			</div>

			<!-- Empty State (shown by default) -->
			<div id='empty-state' class='text-center py-12'>
				<div class='w-16 h-16 bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4'>
					<span class='text-2xl'>🎲</span>
				</div>
				<h3 class='text-xl font-semibold text-gray-300 mb-2'>No campaigns yet</h3>
				<p class='text-gray-400 mb-6'>Start your first Gloomhaven adventure!</p>
				<Button href='/campaigns/new' variant='primary'> Create Campaign </Button>
			</div>

			<!-- Recent Campaigns Grid (hidden by default) -->
			<div id='recent-campaigns' class='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6' style='display: none;'></div>
		</div>

		<!-- Quick Actions -->
		<div class='bg-gray-800 rounded-lg p-6 border border-gray-700 mb-8'>
			<h2 class='text-xl font-bold text-white mb-4'>Quick Actions</h2>
			<div class='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4'>
				<a href='/campaigns/new' class='flex items-center p-4 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors'>
					<div class='w-10 h-10 bg-green-600 rounded-lg flex items-center justify-center mr-3'>
						<span class='text-white font-bold'>+</span>
					</div>
					<div>
						<p class='font-medium text-white'>New Campaign</p>
						<p class='text-sm text-gray-400'>Start a new adventure</p>
					</div>
				</a>

				<a href='/characters' class='flex items-center p-4 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors'>
					<div class='w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center mr-3'>
						<span class='text-white font-bold'>👤</span>
					</div>
					<div>
						<p class='font-medium text-white'>Characters</p>
						<p class='text-sm text-gray-400'>Manage characters</p>
					</div>
				</a>

				<a href='/scenarios' class='flex items-center p-4 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors'>
					<div class='w-10 h-10 bg-purple-600 rounded-lg flex items-center justify-center mr-3'>
						<span class='text-white font-bold'>🎯</span>
					</div>
					<div>
						<p class='font-medium text-white'>Scenarios</p>
						<p class='text-sm text-gray-400'>Track progress</p>
					</div>
				</a>

				<a href='/items' class='flex items-center p-4 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors'>
					<div class='w-10 h-10 bg-yellow-600 rounded-lg flex items-center justify-center mr-3'>
						<span class='text-white font-bold'>⚔️</span>
					</div>
					<div>
						<p class='font-medium text-white'>Items</p>
						<p class='text-sm text-gray-400'>Browse equipment</p>
					</div>
				</a>
			</div>
		</div>

		<!-- Data Management -->
		<DataExport />
	</div>

	<script>
		import {ClientCampaignManager} from "../utils/clientCampaignManager.js";

		// Load campaigns on page load
		document.addEventListener("DOMContentLoaded", () => {
			loadDashboardData();
		});

		async function loadDashboardData() {
			try {
				const campaigns = await ClientCampaignManager.getAllCampaigns();

				// Update stats
				updateStats(campaigns);

				// Update recent campaigns
				updateRecentCampaigns(campaigns);
			} catch (error) {
				console.error("Failed to load dashboard data:", error);
				// Show empty state on error
				const emptyState = document.getElementById("empty-state");
				const recentCampaignsContainer = document.getElementById("recent-campaigns");
				if (emptyState) emptyState.style.display = "block";
				if (recentCampaignsContainer) recentCampaignsContainer.style.display = "none";
			}
		}

		function updateStats(campaigns: any[]) {
			const totalCampaigns = campaigns.length;
			const totalCharacters = campaigns.reduce((sum, campaign) => sum + campaign.characters.length, 0);
			const totalCompletedScenarios = campaigns.reduce((sum, campaign) => {
				return sum + campaign.scenarios.filter((s: any) => s.completed).length;
			}, 0);

			// Update stat cards
			const statCards = document.querySelectorAll(".stat-card");
			if (statCards.length >= 3) {
				statCards[0].querySelector(".stat-value")!.textContent = totalCampaigns.toString();
				statCards[1].querySelector(".stat-value")!.textContent = totalCharacters.toString();
				statCards[2].querySelector(".stat-value")!.textContent = totalCompletedScenarios.toString();
			}
		}

		function updateRecentCampaigns(campaigns: any[]) {
			const recentCampaignsContainer = document.getElementById("recent-campaigns");
			const emptyState = document.getElementById("empty-state");

			if (campaigns.length === 0) {
				if (emptyState) emptyState.style.display = "block";
				if (recentCampaignsContainer) recentCampaignsContainer.style.display = "none";
			} else {
				if (emptyState) emptyState.style.display = "none";
				if (recentCampaignsContainer) {
					recentCampaignsContainer.style.display = "grid";
					displayRecentCampaigns(campaigns.slice(0, 6));
				}
			}
		}

		function displayRecentCampaigns(campaigns: any[]) {
			const container = document.getElementById("recent-campaigns");
			if (!container) return;

			container.innerHTML = "";

			campaigns.forEach((campaign) => {
				const campaignCard = document.createElement("div");
				campaignCard.className = "bg-gray-800 rounded-lg p-6 border border-gray-700 hover:border-gray-600 transition-colors";

				const completedScenarios = campaign.scenarios.filter((s: any) => s.completed).length;
				const totalScenarios = campaign.scenarios.length;
				const progressPercentage = totalScenarios > 0 ? Math.round((completedScenarios / totalScenarios) * 100) : 0;

				campaignCard.innerHTML = `
					<div class='flex justify-between items-start mb-4'>
						<h3 class='text-lg font-semibold text-white'>${campaign.name}</h3>
						<span class='text-xs text-gray-400 bg-gray-700 px-2 py-1 rounded'>${campaign.groupName}</span>
					</div>

					<div class='space-y-2 mb-4'>
						<div class='flex justify-between text-sm'>
							<span class='text-gray-400'>Characters:</span>
							<span class='text-white'>${campaign.characters.length}</span>
						</div>
						<div class='flex justify-between text-sm'>
							<span class='text-gray-400'>Progress:</span>
							<span class='text-white'>${completedScenarios}/${totalScenarios}</span>
						</div>
						<div class='flex justify-between text-sm'>
							<span class='text-gray-400'>Last Played:</span>
							<span class='text-white'>${campaign.updatedAt ? new Date(campaign.updatedAt).toLocaleDateString() : "Never"}</span>
						</div>
					</div>

					<div class='w-full bg-gray-700 rounded-full h-2 mb-4'>
						<div class='bg-gradient-to-r from-purple-600 to-blue-600 h-2 rounded-full transition-all duration-300' style='width: ${progressPercentage}%'></div>
					</div>

					<div class='flex space-x-2'>
						<a href='/campaigns/${campaign.id}' class='flex-1 bg-purple-600 hover:bg-purple-700 text-white text-center py-2 px-3 rounded text-sm font-medium transition-colors'>View</a>
						<a href='/campaigns/${campaign.id}/edit' class='flex-1 bg-gray-600 hover:bg-gray-500 text-white text-center py-2 px-3 rounded text-sm font-medium transition-colors'>Edit</a>
					</div>
				`;

				container.appendChild(campaignCard);
			});
		}
	</script>
</Layout>
