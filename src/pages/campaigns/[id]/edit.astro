---
import Layout from "../../../layouts/Layout.astro";
import {CHARACTER_CLASSES} from "../../../types/index.js";

// Get the campaign ID from the URL params
const {id} = Astro.params;
---

<Layout title='Edit Campaign - Gloomhaven Tracker'>
	<div class='max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8'>
		<!-- Header -->
		<div class='mb-8'>
			<h1 class='text-3xl font-bold text-white'>Edit Campaign</h1>
			<p class='text-gray-400 mt-2'>Update your Gloomhaven: Jaws of the Lion campaign details</p>
		</div>

		<!-- Loading State -->
		<div id='loading-state' class='text-center py-16'>
			<div class='w-16 h-16 bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4'>
				<span class='text-2xl'>‚è≥</span>
			</div>
			<h2 class='text-xl font-semibold text-gray-300 mb-2'>Loading Campaign...</h2>
			<p class='text-gray-400'>Please wait while we load your campaign data.</p>
		</div>

		<!-- Error State -->
		<div id='error-state' class='text-center py-16' style='display: none;'>
			<div class='w-16 h-16 bg-red-700 rounded-full flex items-center justify-center mx-auto mb-4'>
				<span class='text-2xl'>‚ùå</span>
			</div>
			<h2 class='text-xl font-semibold text-gray-300 mb-2'>Campaign Not Found</h2>
			<p class='text-gray-400 mb-6'>The campaign you're looking for doesn't exist or has been deleted.</p>
			<a href='/campaigns' class='bg-purple-600 hover:bg-purple-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors'> Back to Campaigns </a>
		</div>

		<!-- Edit Form -->
		<form id='edit-campaign-form' class='space-y-8' style='display: none;'>
			<!-- Campaign Details -->
			<div class='bg-gray-800 rounded-lg p-6 border border-gray-700'>
				<h2 class='text-xl font-semibold text-white mb-4'>Campaign Details</h2>

				<div class='grid grid-cols-1 md:grid-cols-2 gap-6'>
					<div>
						<label for='campaign-name' class='block text-sm font-medium text-gray-300 mb-2'> Campaign Name * </label>
						<input
							type='text'
							id='campaign-name'
							name='name'
							required
							class='w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent'
							placeholder="e.g., The Dragon's Den"
						/>
					</div>

					<div>
						<label for='group-name' class='block text-sm font-medium text-gray-300 mb-2'> Group Name * </label>
						<input
							type='text'
							id='group-name'
							name='groupName'
							required
							class='w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent'
							placeholder='e.g., The Adventurers'
						/>
					</div>
				</div>

				<div class='mt-6'>
					<label for='description' class='block text-sm font-medium text-gray-300 mb-2'> Description </label>
					<textarea
						id='description'
						name='description'
						rows='3'
						class='w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent'
						placeholder='Optional description of your campaign...'></textarea>
				</div>
			</div>

			<!-- Jaws of the Lion Campaign Progress -->
			<div class='bg-gray-800 rounded-lg p-6 border border-gray-700'>
				<h2 class='text-xl font-semibold text-white mb-4'>Campaign Progress</h2>

				<div class='grid grid-cols-1 md:grid-cols-2 gap-6 mb-6'>
					<div>
						<label for='party-gold' class='block text-sm font-medium text-gray-300 mb-2'> üí∞ Party Gold </label>
						<input
							type='number'
							id='party-gold'
							name='partyGold'
							min='0'
							class='w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent'
							placeholder='0'
						/>
						<p class='text-xs text-gray-400 mt-1'>Shared gold pool for the party</p>
					</div>

					<div>
						<label for='checkmarks' class='block text-sm font-medium text-gray-300 mb-2'> ‚úÖ Checkmarks </label>
						<input
							type='number'
							id='checkmarks'
							name='checkmarks'
							min='0'
							class='w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent'
							placeholder='0'
						/>
						<p class='text-xs text-gray-400 mt-1'>Total checkmarks earned by the party</p>
					</div>
				</div>

				<div class='mb-6'>
					<label class='block text-sm font-medium text-gray-300 mb-3'> üéØ Completed Scenarios </label>
					<div class='grid grid-cols-5 md:grid-cols-10 gap-2'>
						{
							Array.from({length: 25}, (_, i) => i + 1).map((num) => (
								<div class='flex items-center justify-center cursor-pointer scenario-container' data-scenario={num}>
									<input type='checkbox' name={`completed-scenario-${num}`} class='sr-only' value={num} id={`scenario-${num}`} />
									<div class='w-8 h-8 bg-gray-700 border border-gray-600 rounded flex items-center justify-center text-xs font-medium text-gray-300 hover:bg-gray-600 transition-colors completed-scenario'>
										{num}
									</div>
								</div>
							))
						}
					</div>
					<p class='text-xs text-gray-400 mt-2'>Click scenario numbers to mark as completed</p>
				</div>

				<div>
					<label for='notes' class='block text-sm font-medium text-gray-300 mb-2'> üìù Campaign Notes </label>
					<textarea
						id='notes'
						name='notes'
						rows='3'
						class='w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent'
						placeholder='Track important story events, party decisions, or campaign notes...'></textarea>
				</div>
			</div>

			<!-- Characters Section -->
			<div class='bg-gray-800 rounded-lg p-6 border border-gray-700'>
				<h2 class='text-xl font-semibold text-white mb-4'>Characters</h2>
				<div id='characters-container' class='space-y-4'>
					<!-- Characters will be loaded here -->
				</div>
				<button type='button' id='add-character-btn' class='mt-4 bg-gray-600 hover:bg-gray-500 text-white font-medium py-2 px-4 rounded-lg transition-colors'> + Add Character </button>
			</div>

			<!-- Actions -->
			<div class='flex justify-between space-x-4'>
				<a href='/campaigns' class='bg-gray-600 hover:bg-gray-500 text-white font-medium py-2 px-6 rounded-lg transition-colors'> Cancel </a>
				<div class='flex space-x-4'>
					<button type='button' id='delete-campaign-btn' class='bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-6 rounded-lg transition-colors'> Delete Campaign </button>
					<button type='submit' class='bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-semibold py-2 px-6 rounded-lg transition-all duration-200'>
						Save Changes
					</button>
				</div>
			</div>
		</form>
	</div>

	<script define:vars={{campaignId: id}}>
		// Inline campaign manager functions to avoid import issues
		class ClientCampaignManager {
			static async getCampaign(id) {
				try {
					const response = await fetch(`/api/campaigns/${id}`);
					if (!response.ok) {
						if (response.status === 404) return undefined;
						throw new Error("Failed to fetch campaign");
					}
					const campaign = await response.json();

					// Convert date strings back to Date objects
					return {
						...campaign,
						createdAt: new Date(campaign.createdAt),
						updatedAt: new Date(campaign.updatedAt),
						characters: campaign.characters.map((char) => ({
							...char,
							createdAt: new Date(char.createdAt),
							updatedAt: new Date(char.updatedAt),
						})),
						scenarios: campaign.scenarios.map((scenario) => ({
							...scenario,
							completedAt: scenario.completedAt ? new Date(scenario.completedAt) : undefined,
						})),
					};
				} catch (error) {
					console.warn("Failed to load campaign:", error);
					return undefined;
				}
			}

			static async updateCampaign(id, updates) {
				try {
					const response = await fetch(`/api/campaigns/${id}`, {
						method: "PUT",
						headers: {
							"Content-Type": "application/json",
						},
						body: JSON.stringify(updates),
					});

					if (!response.ok) {
						if (response.status === 404) return undefined;
						throw new Error("Failed to update campaign");
					}

					const updatedCampaign = await response.json();

					// Convert date strings back to Date objects
					return {
						...updatedCampaign,
						createdAt: new Date(updatedCampaign.createdAt),
						updatedAt: new Date(updatedCampaign.updatedAt),
					};
				} catch (error) {
					console.error("Failed to update campaign:", error);
					return undefined;
				}
			}

			static async deleteCampaign(id) {
				try {
					const response = await fetch(`/api/campaigns/${id}`, {
						method: "DELETE",
					});

					if (!response.ok) {
						if (response.status === 404) return false;
						throw new Error("Failed to delete campaign");
					}

					return true;
				} catch (error) {
					console.error("Failed to delete campaign:", error);
					return false;
				}
			}
		}

		const CHARACTER_CLASSES = [
			{id: "hatchet", name: "Hatchet", symbol: "üéØ", color: "#8B4513", maxLevel: 9},
			{id: "red-guard", name: "Red Guard", symbol: "üõ°Ô∏è", color: "#DC143C", maxLevel: 9},
			{id: "voidwarden", name: "Voidwarden", symbol: "üîÆ", color: "#4B0082", maxLevel: 9},
			{id: "demolitionist", name: "Demolitionist", symbol: "üí•", color: "#FF8C00", maxLevel: 9},
		];

		let characterCount = 0;

		// Load campaign data on page load
		document.addEventListener("DOMContentLoaded", async () => {
			await loadCampaign();
		});

		async function loadCampaign() {
			try {
				const campaign = await ClientCampaignManager.getCampaign(campaignId);

				if (!campaign) {
					showErrorState();
					return;
				}

				populateForm(campaign);
				showEditForm();
			} catch (error) {
				console.error("Failed to load campaign:", error);
				showErrorState();
			}
		}

		function populateForm(campaign) {
			// Populate basic fields
			document.getElementById("campaign-name").value = campaign.name;
			document.getElementById("group-name").value = campaign.groupName;
			document.getElementById("description").value = campaign.description || "";
			document.getElementById("party-gold").value = campaign.partyGold || 0;
			document.getElementById("checkmarks").value = campaign.checkmarks || 0;
			document.getElementById("notes").value = campaign.notes || "";

			// Populate completed scenarios
			if (campaign.scenarios) {
				campaign.scenarios.forEach((scenario) => {
					if (scenario.completed) {
						const checkbox = document.querySelector(`input[name="completed-scenario-${scenario.number}"]`);
						if (checkbox) {
							checkbox.checked = true;
							const container = checkbox.closest(".scenario-container");
							const visualElement = container.querySelector(".completed-scenario");
							visualElement.classList.add("bg-green-600", "border-green-500", "text-white");
							visualElement.classList.remove("bg-gray-700", "border-gray-600", "text-gray-300");
						}
					}
				});
			}

			// Populate characters
			const charactersContainer = document.getElementById("characters-container");
			charactersContainer.innerHTML = "";
			characterCount = 0;

			campaign.characters.forEach((character) => {
				addCharacterToForm(character);
			});
		}

		function addCharacterToForm(character = null) {
			const container = document.getElementById("characters-container");
			if (!container) return;

			const characterDiv = document.createElement("div");
			characterDiv.className = "bg-gray-700 rounded-lg p-4 border border-gray-600";
			characterDiv.innerHTML = `
				<div class="flex justify-between items-center mb-4">
					<h3 class="text-lg font-medium text-white">Character ${characterCount + 1}</h3>
					<button type="button" class="text-red-400 hover:text-red-300 remove-character-btn">
						Remove
					</button>
				</div>

				<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
					<div>
						<label class="block text-sm font-medium text-gray-300 mb-2">Character Name *</label>
						<input
							type="text"
							name="characters[${characterCount}].name"
							${character ? `value="${character.name}"` : ""}
							required
							class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500"
							placeholder="e.g., Thorne"
						/>
					</div>

					<div>
						<label class="block text-sm font-medium text-gray-300 mb-2">Class *</label>
						<select
							name="characters[${characterCount}].class"
							required
							class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
						>
							<option value="">Select a class</option>
							${CHARACTER_CLASSES.map((cls) => `<option value="${cls.id}" ${character && character.class.id === cls.id ? "selected" : ""}>${cls.symbol} ${cls.name}</option>`).join("")}
						</select>
					</div>
				</div>

				<div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
					<div>
						<label class="block text-sm font-medium text-gray-300 mb-2">üéØ Level</label>
						<input
							type="number"
							name="characters[${characterCount}].level"
							min="1"
							max="9"
							${character ? `value="${character.level}"` : 'value="1"'}
							class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
						/>
					</div>

					<div>
						<label class="block text-sm font-medium text-gray-300 mb-2">‚≠ê Experience</label>
						<input
							type="number"
							name="characters[${characterCount}].experience"
							min="0"
							${character ? `value="${character.experience}"` : 'value="0"'}
							class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
						/>
					</div>

					<div>
						<label class="block text-sm font-medium text-gray-300 mb-2">üí∞ Gold</label>
						<input
							type="number"
							name="characters[${characterCount}].gold"
							min="0"
							${character ? `value="${character.gold}"` : 'value="30"'}
							class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
						/>
					</div>

					<div>
						<label class="block text-sm font-medium text-gray-300 mb-2">‚úÖ Checkmarks</label>
						<input
							type="number"
							name="characters[${characterCount}].checkmarks"
							min="0"
							${character ? `value="${character.checkmarks}"` : 'value="0"'}
							class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
						/>
					</div>
				</div>

				<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
					<div>
						<label class="block text-sm font-medium text-gray-300 mb-2">üéí Items</label>
						<textarea
							name="characters[${characterCount}].items"
							rows="2"
							class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500"
							placeholder="List owned items (e.g., Boots of Striding, Minor Healing Potion)"
						>${character ? character.items.join(", ") : ""}</textarea>
					</div>

					<div>
						<label class="block text-sm font-medium text-gray-300 mb-2">üìù Notes</label>
						<textarea
							name="characters[${characterCount}].notes"
							rows="2"
							class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500"
							placeholder="Character notes, personal quest progress, etc."
						>${character ? character.notes : ""}</textarea>
					</div>
				</div>
			`;

			container.appendChild(characterDiv);
			characterCount++;

			// Add remove functionality
			const removeBtn = characterDiv.querySelector(".remove-character-btn");
			if (removeBtn) {
				removeBtn.addEventListener("click", () => {
					characterDiv.remove();
				});
			}
		}

		function showEditForm() {
			document.getElementById("loading-state").style.display = "none";
			document.getElementById("error-state").style.display = "none";
			document.getElementById("edit-campaign-form").style.display = "block";
		}

		function showErrorState() {
			document.getElementById("loading-state").style.display = "none";
			document.getElementById("edit-campaign-form").style.display = "none";
			document.getElementById("error-state").style.display = "block";
		}

		// Add character button
		document.getElementById("add-character-btn").addEventListener("click", () => {
			addCharacterToForm();
		});

		// Handle scenario checkbox clicks
		document.addEventListener("click", (e) => {
			if (e.target.classList.contains("completed-scenario")) {
				e.preventDefault();
				e.stopPropagation();

				const container = e.target.closest(".scenario-container");
				const checkbox = container.querySelector('input[type="checkbox"]');

				// Toggle the checkbox state
				checkbox.checked = !checkbox.checked;

				// Update visual state based on new checkbox state
				const visualElement = e.target;
				if (checkbox.checked) {
					visualElement.classList.add("bg-green-600", "border-green-500", "text-white");
					visualElement.classList.remove("bg-gray-700", "border-gray-600", "text-gray-300");
				} else {
					visualElement.classList.remove("bg-green-600", "border-green-500", "text-white");
					visualElement.classList.add("bg-gray-700", "border-gray-600", "text-gray-300");
				}

				console.log(`Scenario ${checkbox.value} toggled to: ${checkbox.checked}`);
			}
		});

		// Form submission
		document.getElementById("edit-campaign-form").addEventListener("submit", async (e) => {
			e.preventDefault();

			const formData = new FormData(e.target);

			// Collect completed scenarios
			const completedScenarios = [];
			const allScenarioCheckboxes = document.querySelectorAll('input[name^="completed-scenario-"]');
			console.log("All scenario checkboxes:", allScenarioCheckboxes.length);

			allScenarioCheckboxes.forEach((checkbox) => {
				console.log(`Scenario ${checkbox.value}: checked = ${checkbox.checked}`);
				if (checkbox.checked) {
					completedScenarios.push(parseInt(checkbox.value));
				}
			});

			console.log("Completed scenarios to save:", completedScenarios);

			const campaignData = {
				name: formData.get("name"),
				groupName: formData.get("groupName"),
				description: formData.get("description"),
				partyGold: parseInt(formData.get("partyGold")) || 0,
				checkmarks: parseInt(formData.get("checkmarks")) || 0,
				completedScenarios: completedScenarios,
				notes: formData.get("notes"),
			};

			try {
				const updatedCampaign = await ClientCampaignManager.updateCampaign(campaignId, campaignData);

				if (updatedCampaign) {
					alert("Campaign updated successfully!");
					window.location.href = "/campaigns";
				} else {
					alert("Failed to update campaign. Please try again.");
				}
			} catch (error) {
				console.error("Error updating campaign:", error);
				alert("Failed to update campaign. Please try again.");
			}
		});

		// Delete campaign button
		document.getElementById("delete-campaign-btn").addEventListener("click", async () => {
			if (confirm("Are you sure you want to delete this campaign? This action cannot be undone.")) {
				try {
					const success = await ClientCampaignManager.deleteCampaign(campaignId);

					if (success) {
						alert("Campaign deleted successfully!");
						window.location.href = "/campaigns";
					} else {
						alert("Failed to delete campaign. Please try again.");
					}
				} catch (error) {
					console.error("Error deleting campaign:", error);
					alert("Failed to delete campaign. Please try again.");
				}
			}
		});
	</script>
</Layout>
