---
export interface Props {
	href?: string;
	type?: "button" | "submit" | "reset";
	variant?: "primary" | "secondary" | "danger" | "ghost";
	size?: "sm" | "md" | "lg";
	class?: string;
	disabled?: boolean;
}

const {href, type = "button", variant = "primary", size = "md", class: className = "", disabled = false} = Astro.props;

const baseClasses = "font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed";

const variantClasses = {
	primary: "bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white focus:ring-purple-500 transform hover:scale-105",
	secondary: "bg-gray-700 hover:bg-gray-600 text-white focus:ring-gray-500",
	danger: "bg-red-600 hover:bg-red-700 text-white focus:ring-red-500",
	ghost: "bg-transparent hover:bg-gray-700 text-gray-300 hover:text-white border border-gray-600 focus:ring-gray-500",
};

const sizeClasses = {
	sm: "py-1 px-3 text-sm",
	md: "py-2 px-4 text-base",
	lg: "py-3 px-6 text-lg",
};

const classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`.trim();

const Tag = href ? "a" : "button";
const attributes = href ? {href} : {type, disabled};
---

<Tag class={classes} {...attributes}>
	<slot />
</Tag>
